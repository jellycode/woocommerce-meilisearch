// Type definitions for meilisearch 0.14.2
// Project: https://github.com/meilisearch/meilisearch-js
// Definitions by: cvermand <charlotte@meilisearch.com> <https://github.com/meilisearch>
// Definitions: https://github.com/meilisearch/meilisearch-js
// TypeScript Version: 3.9.7

import { Index } from './index';
import MeiliSearch from './meilisearch';
import MeiliSearchApiError from './errors/meilisearch-api-error';
import MeiliSearchTimeOutError from './errors/meilisearch-timeout-error';
import MeiliSearchError from './errors/meilisearch-error';
export { Index };
export { MeiliSearchApiError };
export { MeiliSearchError };
export { MeiliSearchTimeOutError };
export interface Config {
    host: string;
    apiKey?: string;
    headers?: object;
}
export interface IndexRequest {
    uid: string;
    primaryKey?: string;
}
export interface IndexOptions {
    primaryKey?: string;
}
export interface IndexResponse {
    uid: string;
    name?: string;
    primaryKey?: string;
    createdAt: Date;
    updatedAt: Date;
}
export interface AddDocumentParams {
    primaryKey?: string;
}
export declare type FacetFilter = Array<string | string[]>;
export interface SearchParams<T> {
    offset?: number;
    limit?: number;
    attributesToRetrieve?: Array<Extract<keyof T, string> | '*'>;
    attributesToCrop?: Array<Extract<keyof T, string> | '*'>;
    cropLength?: number;
    attributesToHighlight?: Array<Extract<keyof T, string> | '*'>;
    filters?: string;
    facetFilters?: FacetFilter | FacetFilter[];
    facetsDistribution?: string[];
    matches?: boolean;
}
export interface SearchRequest {
    q?: string | null;
    offset?: number;
    limit?: number;
    cropLength?: number;
    attributesToRetrieve?: string[];
    attributesToCrop?: string[];
    attributesToHighlight?: string[];
    facetFilters?: FacetFilter | FacetFilter[];
    facetsDistribution?: string[];
    filters?: string;
    matches?: boolean;
}
export interface GetSearchRequest {
    q?: string | null;
    offset?: number;
    limit?: number;
    attributesToRetrieve?: string;
    attributesToCrop?: string;
    cropLength?: number;
    attributesToHighlight?: string;
    facetFilters?: string;
    facetsDistribution?: string;
    filters?: string;
    matches?: boolean;
}
export declare type Hit<T> = T & {
    _formatted?: T;
};
export interface SearchResponse<T, P extends SearchParams<T>> {
    hits: P['attributesToRetrieve'] extends Array<infer K> ? Array<Hit<Pick<T, Exclude<keyof T, Exclude<keyof T, K>>>>> : Array<Hit<T>>;
    offset: number;
    limit: number;
    processingTimeMs: number;
    facetsDistribution?: object;
    exhaustiveFacetsCount?: boolean;
    query: string;
    nbHits: number;
}
export interface FieldsDistribution {
    [field: string]: number;
}
export interface GetDocumentsParams<T> {
    offset?: number;
    limit?: number;
    attributesToRetrieve?: Array<Extract<keyof T, string>> | Extract<keyof T, string>;
}
export declare type GetDocumentsResponse<T, P extends GetDocumentsParams<T>> = P['attributesToRetrieve'] extends keyof T ? Array<Document<Pick<T, Exclude<keyof T, Exclude<keyof T, P['attributesToRetrieve']>>>>> : P['attributesToRetrieve'] extends Array<infer K> ? Array<Document<Pick<T, Exclude<keyof T, Exclude<keyof T, K>>>>> : Array<Document<T>>;
export declare type DocumentLike = {
    [Key in string]?: DocumentField;
};
export declare type DocumentArray = DocumentField[];
export declare type DocumentField = string | number | boolean | null | DocumentLike | DocumentArray;
export declare type Document<T> = DocumentLike & {
    [key in keyof T]: T[key];
};
export interface Settings {
    attributesForFaceting?: string[];
    distinctAttribute?: string;
    searchableAttributes?: string[];
    displayedAttributes?: string[];
    rankingRules?: string[];
    stopWords?: string[];
    synonyms?: {
        [field: string]: string[];
    };
}
export interface EnqueuedUpdate {
    updateId: number;
}
export interface Update {
    status: string;
    updateId: number;
    type: {
        name: string;
        number: number;
    };
    duration: number;
    enqueuedAt: string;
    processedAt: string;
}
export interface EnqueuedDump {
    uid: string;
    status: 'processing' | 'dump_process_failed' | 'done';
}
export interface IndexStats {
    numberOfDocuments: number;
    isIndexing: boolean;
    fieldsDistribution: FieldsDistribution;
}
export interface Stats {
    databaseSize: number;
    lastUpdate: string;
    indexes: {
        [index: string]: IndexStats;
    };
}
export interface Keys {
    private: string | null;
    public: string | null;
}
export interface Version {
    commitSha: string;
    buildDate: string;
    pkgVersion: string;
}
export interface MeiliSearchInterface {
    config: Config;
    getIndex: <T>(indexUid: string) => Index<T>;
    getOrCreateIndex: <T>(uid: string, options?: IndexOptions) => Promise<Index<T>>;
    listIndexes: () => Promise<IndexResponse[]>;
    createIndex: <T>(uid: string, options?: IndexOptions) => Promise<Index<T>>;
    getKeys: () => Promise<Keys>;
    isHealthy: () => Promise<boolean>;
    setHealthy: () => Promise<void>;
    setUnhealthy: () => Promise<void>;
    changeHealthTo: (health: boolean) => Promise<void>;
    stats: () => Promise<Stats>;
    version: () => Promise<Version>;
    createDump: () => Promise<EnqueuedDump>;
    getDumpStatus: (dumpUid: string) => Promise<EnqueuedDump>;
}
export declare type Methods = 'POST' | 'GET';
export interface IndexInterface<T = any> {
    uid: string;
    getUpdateStatus: (updateId: number) => Promise<Update>;
    getAllUpdateStatus: () => Promise<Update[]>;
    search: <P extends SearchParams<T>>(query?: string | null, options?: P, method?: Methods) => Promise<SearchResponse<T, P>>;
    show: () => Promise<IndexResponse>;
    updateIndex: (indexData: IndexOptions) => Promise<IndexResponse>;
    deleteIndex: () => Promise<void>;
    getStats: () => Promise<IndexStats>;
    getDocuments: <P extends GetDocumentsParams<T>>(options?: P) => Promise<GetDocumentsResponse<T, P>>;
    getDocument: (documentId: string | number) => Promise<Document<T>>;
    addDocuments: (documents: Array<Document<T>>, options?: AddDocumentParams) => Promise<EnqueuedUpdate>;
    updateDocuments: (documents: Array<Document<T>>, options?: AddDocumentParams) => Promise<EnqueuedUpdate>;
    deleteDocument: (documentId: string | number) => Promise<EnqueuedUpdate>;
    deleteDocuments: (documentsIds: string[] | number[]) => Promise<EnqueuedUpdate>;
    deleteAllDocuments: () => Promise<EnqueuedUpdate>;
    getSettings: () => Promise<Settings>;
    updateSettings: (settings: Settings) => Promise<EnqueuedUpdate>;
    resetSettings: () => Promise<EnqueuedUpdate>;
    getSynonyms: () => Promise<object>;
    updateSynonyms: (synonyms: object) => Promise<object>;
    resetSynonyms: () => Promise<object>;
    getStopWords: () => Promise<string[]>;
    updateStopWords: (stopWords: string[]) => Promise<EnqueuedUpdate>;
    resetStopWords: () => Promise<EnqueuedUpdate>;
    getRankingRules: () => Promise<string[]>;
    updateRankingRules: (rankingRules: string[]) => Promise<EnqueuedUpdate>;
    resetRankingRules: () => Promise<EnqueuedUpdate>;
    getDistinctAttribute: () => Promise<string | null>;
    updateDistinctAttribute: (distinctAttribute: string) => Promise<EnqueuedUpdate>;
    resetDistinctAttribute: () => Promise<EnqueuedUpdate>;
    getAttributesForFaceting: () => Promise<string[]>;
    updateAttributesForFaceting: (attributesForFaceting: string[]) => Promise<EnqueuedUpdate>;
    resetAttributesForFaceting: () => Promise<EnqueuedUpdate>;
    getSearchableAttributes: () => Promise<string[]>;
    updateSearchableAttributes: (searchableAttributes: string[]) => Promise<EnqueuedUpdate>;
    resetSearchableAttributes: () => Promise<EnqueuedUpdate>;
    getDisplayedAttributes: () => Promise<string[]>;
    updateDisplayedAttributes: (displayedAttributes: string[]) => Promise<EnqueuedUpdate>;
    resetDisplayedAttributes: () => Promise<EnqueuedUpdate>;
}
export interface MeiliSearchApiErrorResponse {
    status?: number;
    statusText?: string;
    path?: string;
    method?: string;
    body?: object;
}
export interface MeiliSearchApiErrorRequest {
    url?: string;
    path?: string;
    method?: string;
}
export interface FetchError extends Error {
    type: string;
    errno: string;
    code: string;
}
export declare type MSApiErrorConstructor = new (error: MSApiError, status: number) => void;
export interface MSApiError extends Error {
    name: string;
    message: string;
    stack?: string;
    httpStatus: number;
    errorCode?: string;
    errorType?: string;
    errorLink?: string;
}
export default MeiliSearch;
//# sourceMappingURL=types.d.ts.map